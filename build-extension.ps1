# Script para generar el paquete VSIX de la extensi√≥n FoxPro Go to Definition
# Autor: Generado autom√°ticamente
# Fecha: $(Get-Date -Format "yyyy-MM-dd")

Write-Host "üöÄ Iniciando proceso de construcci√≥n de la extensi√≥n FoxPro..." -ForegroundColor Green

# Verificar si Node.js est√° instalado
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js detectado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Node.js no est√° instalado o no est√° en el PATH" -ForegroundColor Red
    Write-Host "Por favor, instala Node.js desde https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

# Verificar si npm est√° disponible
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm detectado: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: npm no est√° disponible" -ForegroundColor Red
    exit 1
}

# Verificar si vsce est√° instalado globalmente
try {
    $vsceVersion = vsce --version
    Write-Host "‚úÖ vsce detectado: $vsceVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  vsce no est√° instalado globalmente. Instalando..." -ForegroundColor Yellow
    npm install -g vsce
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Error al instalar vsce" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ vsce instalado correctamente" -ForegroundColor Green
}

# Limpiar compilaciones anteriores
Write-Host "üßπ Limpiando archivos de compilaci√≥n anteriores..." -ForegroundColor Cyan
if (Test-Path "out") {
    Remove-Item -Recurse -Force "out"
    Write-Host "‚úÖ Directorio 'out' limpiado" -ForegroundColor Green
}

# Instalar dependencias
Write-Host "üì¶ Instalando dependencias..." -ForegroundColor Cyan
npm install
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error al instalar dependencias" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Dependencias instaladas correctamente" -ForegroundColor Green

# Compilar el proyecto
Write-Host "üî® Compilando el proyecto TypeScript..." -ForegroundColor Cyan
npm run compile
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error en la compilaci√≥n" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Compilaci√≥n completada" -ForegroundColor Green

# Ejecutar linter (opcional, pero recomendado)
Write-Host "üîç Ejecutando linter..." -ForegroundColor Cyan
npm run lint
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Advertencias del linter detectadas, pero continuando..." -ForegroundColor Yellow
}

# Generar el paquete VSIX
Write-Host "üì¶ Generando paquete VSIX..." -ForegroundColor Cyan
vsce package
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error al generar el paquete VSIX" -ForegroundColor Red
    exit 1
}

# Buscar el archivo VSIX generado
$vsixFile = Get-ChildItem -Name "*.vsix" | Select-Object -First 1
if ($vsixFile) {
    Write-Host "üéâ ¬°Paquete VSIX generado exitosamente!" -ForegroundColor Green
    Write-Host "üìÑ Archivo: $vsixFile" -ForegroundColor White
    Write-Host "üìÅ Ubicaci√≥n: $(Get-Location)\$vsixFile" -ForegroundColor White
    
    # Mostrar informaci√≥n del archivo
    $fileInfo = Get-Item $vsixFile
    Write-Host "üìè Tama√±o: $([math]::Round($fileInfo.Length / 1MB, 2)) MB" -ForegroundColor White
    Write-Host "üìÖ Creado: $($fileInfo.CreationTime)" -ForegroundColor White
} else {
    Write-Host "‚ùå No se encontr√≥ el archivo VSIX generado" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "‚ú® Proceso completado exitosamente ‚ú®" -ForegroundColor Green
Write-Host "Para instalar la extensi√≥n, consulta el archivo INSTALL.md" -ForegroundColor Cyan